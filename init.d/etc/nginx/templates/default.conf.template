# fss-proxy default config (by @allex_wang)
upstream backend.srv {
  {{ $servers := split .FSS_UPSTREAM "," }}{{ range $servers }}
  {{ if . }}server {{.}};{{ end }}
  {{ end }}
}

server {
  listen {{.FSS_PORT}};
  charset UTF-8;
  server_tokens off;
  root /var/www;

  {{if .FSS_SSL_PORT}}
  listen {{.FSS_SSL_PORT}} ssl;
  http2 on;
  ssl_certificate /etc/nginx/ssl/tls.crt;
  ssl_certificate_key /etc/nginx/ssl/tls.key;
  error_page 497 =301 https://$host:$server_port$request_uri;
  {{end}}

  {{if eq .FSS_SPA "1"}}
  index index.html;
  rewrite ^/*$ /index.html last;
  {{end}}

  set $prefix '';

  # patch backend cookie samesite flags
  set $cookie_samesite_conditions "";
  if ( $http_user_agent ~ "Chrome[^ \/]*\/[189][\d]+[\.\d]*" ) { set $cookie_samesite_conditions "${scheme}_Chrome_Adv"; }

  {{if .FSS_VALID_REFERERS}}
  # > build valid_referers
  valid_referers {{.FSS_VALID_REFERERS}};
  if ($invalid_referer) {
    return 403;
  }
  {{end}}

  location / {
    if (-f $request_filename) { break; }
    {{if eq .FSS_SPA "1"}}try_files $uri $uri/ $resource_path;
    {{else}}try_files $uri $uri/;{{end}}
    expires 30s;
    add_header X-Origin-Server $hostname;
    {{if .FSS_HEADERS_CSP}}add_header Content-Security-Policy "{{.FSS_HEADERS_CSP}}";{{end}}
    {{if .FSS_HEADERS_XSS_PROTECTION}}add_header X-XSS-Protection "{{.FSS_HEADERS_XSS_PROTECTION}}";{{end}}
    {{if .BUILD_VERSION}}add_header Build-Ver "{{.BUILD_VERSION}}";{{end}}
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "POST, GET, OPTIONS";
    add_header X-Content-Type-Options nosniff;
  }

  {{if .FSS_PROXY}}
  # > generate proxy configs (start)
  {{range jsonparse .FSS_PROXY}}
  location ^~ {{.path}} {
    include "proxy_set.conf";
    rewrite ^{{trimSuffix .path "/"}}/(.+)$ /$1 break;
    proxy_pass {{.target}};
    add_header X-Via "$upstream_addr";
  }
  {{end}}
  # > generate proxy configs (end)
  {{end}}

  location ~* \.(js|css|eot|woff|woff2|ttf|svg|gif|jpeg|jpg|png|bmp|webp|swf|ico|mp4|ogg|ogv|ogm|webm)(\?|$) {
    expires 30d;
    include static_header_set.conf;
    {{if .BUILD_VERSION}}add_header Build-Ver "{{.BUILD_VERSION}}";{{end}}
  }

  {{if .FSS_API_BASE}}
  location ^~ {{.FSS_API_BASE}} { try_files $uri @$http_upgrade; }
  {{end}}

  {{if .FSS_SVC_PREFIX}}
  location ^~ {{.FSS_SVC_PREFIX}} { try_files $uri @$http_upgrade; }
  {{end}}

  location @websocket {
    rewrite ^.*$ $api_rewrite_url break;
    proxy_pass http://backend.srv;
    proxy_http_version 1.1;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    add_header X-Via "$upstream_addr";
  }
  location @ {
    access_log /var/log/nginx/access.log upstream;
    include "proxy_set.conf";
    rewrite ^/(?<p>[^/]+)/.*$ $api_rewrite_url break;
    proxy_pass http://backend.srv;
    proxy_redirect ~^http://(backend.srv|localhost)/(.*) http://$http_host/${p}/$2;
    proxy_intercept_errors on;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header X-Via "$upstream_addr";
    proxy_cookie_path / /$x_proxy_cookie_flags;
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "POST, GET, OPTIONS";
    add_header Content-Type $api_content_type;
  }
}

map $cookie_samesite_conditions $x_proxy_cookie_flags {
  default             "";
  "https_Chrome_Adv"  "; SameSite=None; Secure";
}

map $uri $api_rewrite_url {
  default $uri;
  {{if eq .FSS_REWRITE_API "1"}}
  ~^{{.FSS_API_BASE}}(.*) /$1;
  {{else}}
  ~^{{.FSS_API_BASE}}.* $uri;
  {{end}}
}

map $uri $api_content_type {
  ~\.png$ image/png;
  ~\.(jpg|jpeg)$ image/jpeg;
  ~\.(svg|svgz)$ image/svg+xml;
}
